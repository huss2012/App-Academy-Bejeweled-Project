const chai = require('chai');
const { expect } = require('chai');
const spies = require('chai-spies');
chai.use(spies);

const Bejeweled = require("../class/bejeweled.js");
const Screen = require("../class/screen.js");

describe('Bejeweled', function () {

  let grid;

  // Add tests for setting up a basic board

  describe('insertFruits(grid)', () => {
    it('should insert a fruit in each grid', () => {
      grid = [[" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "]];

      let fruits = ["游볳", "游봀", "游본", "游꼚", "游꼡", "游꼖", "游꼙"];

      Bejeweled.insertFruits(grid);

      for (let row = 0; row < grid.length; row++) {
        for (let col = 0; col < grid[row].length; col++) {
          expect(fruits).to.include(grid[row][col]);
        }
      }
    });

    it('should not insert 3 fruits in a row, vertically or horizontally, when the game starts', () => {
      for (let i = 0; i < 50; i++) {
        grid =
          [[" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "]];

        Bejeweled.insertFruits(grid, true);
        expect(Bejeweled.checkForMatches(grid)).to.be.false;
      }
    });

    it('should not insert new fruits in filled spaces', () => {
      grid =
        [["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"]];

      let originalGrid =
        [["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"],
        ["游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀", "游봀"]];

      Bejeweled.insertFruits(grid, true);
      expect(grid).to.deep.equal(originalGrid);
    });
  });


  // Add tests for a valid swap that matches 3
  describe('checkForMatches(grid)', () => {
    it('should detect 3 equal fruits in a row and remove them from the grid', () => {
      grid = [[" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", "游꼡", "游꼡", "游꼡", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "]];

      Bejeweled.checkForMatches(grid);

      let newGrid = [[" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "]];

      expect(grid).to.deep.equal(newGrid);

      grid = [[" ", " ", " ", " ", " ", " ", " ", " "],
      ["游꼙", " ", " ", " ", " ", " ", " ", " "],
      ["游꼙", " ", " ", " ", " ", " ", " ", " "],
      ["游꼙", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "],
      [" ", " ", " ", " ", " ", " ", " ", " "]];

      Bejeweled.checkForMatches(grid);
      expect(grid).to.deep.equal(newGrid);
    });

    it('should make the items above the fruits disappeared fall to fill the gaps', () => {
      grid =
        [[" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", "游꼚", "游본", "游볳", " ", " ", " ", " "],
        [" ", "游꼖", "游꼙", "游꼚", " ", " ", " ", " "],
        [" ", "游봀", "游꼚", "游꼡", " ", " ", " ", " "],
        [" ", "游꼙", "游꼙", "游꼙", " ", " ", " ", " "]];

      let newGrid =
        [[" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", "游꼚", "游본", "游볳", " ", " ", " ", " "],
        [" ", "游꼖", "游꼙", "游꼚", " ", " ", " ", " "],
        [" ", "游봀", "游꼚", "游꼡", " ", " ", " ", " "]];

      Bejeweled.checkForMatches(grid);
      expect(grid).to.deep.equal(newGrid);

      grid =
        [[" ", "游꼡", " ", " ", " ", " ", " ", " "],
        [" ", "游꼚", " ", " ", " ", " ", " ", " "],
        [" ", "游꼖", " ", " ", " ", " ", " ", " "],
        [" ", "游볳", " ", " ", " ", " ", " ", " "],
        [" ", "游본", " ", " ", " ", " ", " ", " "],
        [" ", "游봀", " ", " ", " ", " ", " ", " "],
        [" ", "游봀", " ", " ", " ", " ", " ", " "],
        [" ", "游봀", " ", " ", " ", " ", " ", " "]];

      newGrid =
        [[" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", "游꼡", " ", " ", " ", " ", " ", " "],
        [" ", "游꼚", " ", " ", " ", " ", " ", " "],
        [" ", "游꼖", " ", " ", " ", " ", " ", " "],
        [" ", "游볳", " ", " ", " ", " ", " ", " "],
        [" ", "游본", " ", " ", " ", " ", " ", " "]];

      Bejeweled.checkForMatches(grid);
      expect(grid).to.deep.equal(newGrid);
    });

    it('should return false if no matches has been found', () => {
      grid =
        [[" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "]];

      expect(Bejeweled.checkForMatches(grid)).to.be.false;
    });


    // Add tests for swaps that set up combos
    context('if there more than 3 fruits of the same type in a row', () => {
      it('should remove all of them', () => {
        grid =
          [[" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", "游본", "游본", "游본", "游본", "游본", " ", " "]];

        Bejeweled.checkForMatches(grid);

        let newGrid =
          [[" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "]];

        expect(grid).to.deep.equal(newGrid);

        grid =
          [[" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", "游본", " ", " ", " ", " ", " ", " "],
          [" ", "游본", " ", " ", " ", " ", " ", " "],
          [" ", "游본", " ", " ", " ", " ", " ", " "],
          [" ", "游본", " ", " ", " ", " ", " ", " "],
          [" ", "游본", " ", " ", " ", " ", " ", " "]];

        newGrid =
          [[" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "]];

        Bejeweled.checkForMatches(grid);
        expect(grid).to.deep.equal(newGrid);
      });
    });
  });

  // Add tests to check if there are no possible valid moves
  describe('checkValidMoves(grid)', () => {
    context('if there are possible moves that makes 3 fruits in a row', () => {
      it('should return true', () => {
        grid =
          [[" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", "游볳", " ", " ", " ", " ", " ", " "],
          [" ", "游볳", " ", " ", " ", " ", " ", " "],
          [" ", "游본", " ", " ", " ", " ", " ", " "],
          [" ", "游볳", " ", " ", " ", " ", " ", " "],
          [" ", "游꼡", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "]];

        expect(Bejeweled.checkValidMoves(grid)).to.be.true;
      });
    });

    context('if there are no possible moves that makes 3 fruits in a row', () => {
      it('should return false', () => {
        grid =
          [[" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", "游꼡", "游꼚", "游꼙", "游본", "游꼖", "游봀", " "]];

        expect(Bejeweled.checkValidMoves(grid)).to.be.false;
      });
    });
  });
});
